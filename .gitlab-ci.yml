# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test_frontend
  - test_backend
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_REGISTRY: docker.io
  GCP_HOST: $GCP_HOST
  GCP_USER: $GCP_USER
  GCP_SSH_PRIVATE_KEY: $GCP_SSH_PRIVATE_KEY
  DOCKER_TLS_CERTDIR: ""

test_frontend:
  stage: test_frontend
  image: node:current-alpine3.16
  script:
    - cd ./xdpets
    - npm install
    - npm test -- --watchAll=false
  only:
    - Test
  when: always
  tags:
    - nccutrial_frontend

test_backend:
  stage: test_backend
  script:
    - cd ./backend
    - cp /home/gitlab-runner/.env .
    - docker compose up --build -d
    - sleep 30
    - docker exec -i backend-backend-1 bash -c "source /app/.env && /usr/local/bin/python /app/manage.py test"
  after_script:
    - cd ./backend
    - docker compose down
  only:
    - Test
  when: always
  tags:
    - nccutrial_backend

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin
  script:
    - docker-compose -f docker-compose.yml build
    - docker images
    - docker-compose -f docker-compose.yml push allenw4/xdpets_1:latest
  tags:
    - cicdrunner
  only:
    - BackEnd


# deploy:
#   stage: deploy
#   image: alpine:latest
#   before_script:
#     - apk add --no-cache openssh
#     - mkdir -p ~/.ssh
#     - echo "$SSH_KEY_PRIVATE_GCP" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - ssh-keyscan $GCP_VM_HOST >> ~/.ssh/known_hosts
#     - ssh $GCP_LOGIN_USER@$GCP_VM_HOST "echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin"
#   script:
#     - ssh $GCP_LOGIN_USER@$GCP_VM_HOST "docker-compose -f /path/docker-compose.yml pull"
#     - ssh $GCP_LOGIN_USER@$GCP_VM_HOST "docker-compose -f /path/to/your/docker-compose.yml up -d"
#   only:
#     - BackEnd


# backend-deploy:
#   stage: deploy
#   image: gitlab/dind:latest
#   before_script:
#     - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
#     - eval $(ssh-agent -s)
#     - echo "${SSH_KEY_PRIVATE_GCP}" | tr -d '\r' > deploy.pem
#     - chmod 400 deploy.pem
#     - ssh-add deploy.pem
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - ssh ${GCP_LOGIN_USER}@${GCP_VM_HOST} "docker images && docker ps -a"
#     - ssh ${GCP_LOGIN_USER}@${GCP_VM_HOST} "bash ~/clear-docker.sh backend-example $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
#     - ssh ${GCP_LOGIN_USER}@${GCP_VM_HOST} "docker run -d --name backend-example -p 3000:3000 $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
#   only:
#     - BackEnd