# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test_frontend
  - test_backend
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_REGISTRY: docker.io
  GCP_HOST: $GCP_HOST
  GCP_USER: $GCP_USER
  GCP_SSH_PRIVATE_KEY: $GCP_SSH_PRIVATE_KEY
  DOCKER_TLS_CERTDIR: ""

test_frontend:
  stage: test_frontend
  image: node:current-alpine3.16
  script:
    - cd ./xdpets
    - npm install
    - npm test -- --watchAll=false
  only:
    - Test
  when: always
  tags:
    - nccutrial_frontend

test_backend:
  stage: test_backend
  script:
    - cd ./backend
    - cp /home/gitlab-runner/.env .
    - docker compose up --build -d
    - sleep 30
    - docker exec -i backend-backend-1 bash -c "source /app/.env && /usr/local/bin/python /app/manage.py test"
  after_script:
    - cd ./backend
    - docker compose down
  only:
    - Test
  when: always
  tags:
    - nccutrial_backend

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "MYSQL_NAME=$MYSQL_NAME" > .env
    - echo "MYSQL_USER=$MYSQL_USER" >> .env
    - echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
    - echo "MYSQL_HOST=$MYSQL_HOST" >> .env
    - echo "EMAIL_USER=$EMAIL_USER" >> .env
    - echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
    - cp .env ./backend/backend/.env

  script:
    - docker-compose -f docker-compose.yml build
    - docker images
    - docker-compose -f docker-compose.yml push
  tags:
    - cicdrunner2
  only:
    - main

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin
    - echo "MYSQL_NAME=$MYSQL_NAME" > .env
    - echo "MYSQL_USER=$MYSQL_USER" >> .env
    - echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
    - echo "MYSQL_HOST=$MYSQL_HOST" >> .env
    - echo "EMAIL_USER=$EMAIL_USER" >> .env
    - echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
    - cp .env ./backend/backend/.env
    - cat ./backend/backend/.env
    - cat .env
  script:
    - docker compose -f docker-compose.yml pull
    - docker compose -f docker-compose.yml up
  tags:
    - cicdrunner2
  only:
    - main